<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Digital Storefront</title>
    <style>
        body {
            margin: 0;
            padding: 20px;
            font-family: Arial, sans-serif;
            background-color: #f5f5f5;
            overflow-x: hidden;
            position: relative;
        }

        .project-container {
            max-width: 600px;
            margin: 0 auto;
            margin-left: auto;
            margin-right: 0;
            padding: 40px;
            background-color: #ffffff;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            position: relative;
            z-index: 1;
        }

        .products-grid {
            display: grid;
            grid-template-columns: repeat(1, 1fr);
            gap: 20px;
            margin-top: 30px;
        }

        .product-card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            padding: 15px;
            transition: transform 0.2s;
            border: 1px solid #eee;
        }

        .product-card:hover {
            transform: translateY(-5px);
        }

        .product-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
            border-radius: 4px;
            margin-bottom: 15px;
        }

        .product-title {
            font-size: 1.3em;
            color: #2c3e50;
            margin: 0 0 10px 0;
        }

        .product-description {
            color: #666;
            margin-bottom: 15px;
            line-height: 1.5;
            font-size: 0.9em;
        }

        .product-price {
            font-size: 1.25em;
            color: #2ecc71;
            font-weight: bold;
            margin-bottom: 15px;
        }

        .buy-button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            width: 100%;
            font-size: 1em;
            transition: background-color 0.2s;
        }

        .buy-button:hover {
            background-color: #2980b9;
        }

        .header {
            margin-bottom: 30px;
        }

        .header h1 {
            font-size: 1.8em;
            color: #2c3e50;
            margin: 0 0 10px 0;
        }

        .header p {
            color: #666;
            font-size: 1em;
            margin: 0;
        }

        /* CSS Butterfly */
        .butterfly {
            position: fixed;
            left: 50px;
            top: 50px;
            transform: scale(0.5);
            transition: all 3s ease-in-out;
            z-index: 2;
        }

        .butterfly-wing {
            width: 50px;
            height: 80px;
            background: linear-gradient(45deg, #ff69b4, #ff1493);
            box-shadow: 0 0 10px rgba(255, 105, 180, 0.5);
            border-radius: 50% 50% 50% 50% / 60% 60% 40% 40%;
            position: absolute;
            animation: flutter 2s infinite ease-in-out;
        }

        .butterfly-wing.left {
            left: -25px;
            transform-origin: right center;
        }

        .butterfly-wing.right {
            right: -25px;
            transform-origin: left center;
        }

        .butterfly-body {
            width: 6px;
            height: 60px;
            background: #333;
            position: absolute;
            left: 50%;
            transform: translateX(-50%);
            border-radius: 3px;
        }

        @keyframes flutter {
            0%, 100% { transform: rotate(0deg); }
            50% { transform: rotate(30deg); }
        }

        /* CSS Ladybug */
        .ladybug {
            position: fixed;
            right: 50px;
            bottom: 50px;
            transform: scale(0.5);
            transition: all 2s ease-in-out;
            z-index: 2;
        }

        .ladybug-body {
            width: 60px;
            height: 70px;
            background: linear-gradient(45deg, #ff0000, #cc0000);
            box-shadow: 0 0 10px rgba(255, 0, 0, 0.4);
            border-radius: 50%;
            position: relative;
            overflow: hidden;
        }

        .ladybug-head {
            width: 30px;
            height: 30px;
            background: #333;
            border-radius: 50%;
            position: absolute;
            top: -15px;
            left: 50%;
            transform: translateX(-50%);
        }

        .ladybug-spot {
            width: 12px;
            height: 12px;
            background: #333;
            border-radius: 50%;
            position: absolute;
        }

        .ladybug-spot:nth-child(1) { top: 20%; left: 20%; }
        .ladybug-spot:nth-child(2) { top: 20%; right: 20%; }
        .ladybug-spot:nth-child(3) { top: 50%; left: 30%; }
        .ladybug-spot:nth-child(4) { top: 50%; right: 30%; }
        .ladybug-spot:nth-child(5) { bottom: 20%; left: 20%; }
        .ladybug-spot:nth-child(6) { bottom: 20%; right: 20%; }

        /* CSS Ant */
        .ant {
            position: fixed;
            left: 150px;
            bottom: 100px;
            transform: scale(0.5) rotate(45deg);
            transition: all 1.5s linear;
            z-index: 2;
        }

        .ant-body {
            width: 40px;
            height: 80px;
            background: #333;
            border-radius: 20px;
            position: relative;
        }

        .ant-head {
            width: 30px;
            height: 30px;
            background: #333;
            border-radius: 50%;
            position: absolute;
            top: -20px;
            left: 50%;
            transform: translateX(-50%);
        }

        .ant-leg {
            width: 40px;
            height: 3px;
            background: #333;
            position: absolute;
            transform-origin: left center;
        }

        .ant-leg:nth-child(1) { transform: rotate(-30deg); top: 20px; }
        .ant-leg:nth-child(2) { transform: rotate(0deg); top: 40px; }
        .ant-leg:nth-child(3) { transform: rotate(30deg); top: 60px; }
        .ant-leg:nth-child(4) { transform: rotate(-30deg) scaleX(-1); right: 0; top: 20px; }
        .ant-leg:nth-child(5) { transform: rotate(0deg) scaleX(-1); right: 0; top: 40px; }
        .ant-leg:nth-child(6) { transform: rotate(30deg) scaleX(-1); right: 0; top: 60px; }

        /* Additional insect styles */
        .dragonfly {
            position: fixed;
            left: 50px;
            top: 50px;
            transform: scale(0.4);
            transition: all 0.5s ease-out;
            z-index: 2;
        }

        .dragonfly-body {
            width: 80px;
            height: 6px;
            background: linear-gradient(90deg, #4a90e2, #00f);
            box-shadow: 0 0 15px rgba(74, 144, 226, 0.6);
            position: relative;
            border-radius: 3px;
        }

        .dragonfly-wing {
            width: 40px;
            height: 15px;
            background: linear-gradient(45deg, rgba(255, 255, 255, 0.9), rgba(255, 255, 255, 0.4));
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
            position: absolute;
            border-radius: 50% 50% 50% 50% / 30% 30% 70% 70%;
        }

        .dragonfly-wing.top-left { transform: rotate(-30deg); top: -10px; left: 10px; }
        .dragonfly-wing.top-right { transform: rotate(30deg); top: -10px; right: 10px; }
        .dragonfly-wing.bottom-left { transform: rotate(30deg); bottom: -10px; left: 10px; }
        .dragonfly-wing.bottom-right { transform: rotate(-30deg); bottom: -10px; right: 10px; }

        .bee {
            position: fixed;
            left: 50px;
            top: 50px;
            transform: scale(0.4);
            transition: all 0.3s ease-out;
            z-index: 2;
        }

        .bee-body {
            width: 60px;
            height: 30px;
            background: linear-gradient(90deg, 
                #ffd700 0%, #ffd700 20%, 
                #333 20%, #333 40%,
                #ffd700 40%, #ffd700 60%,
                #333 60%, #333 80%,
                #ffd700 80%, #ffd700 100%);
            border-radius: 20px;
            position: relative;
            box-shadow: 0 0 10px rgba(255, 215, 0, 0.5);
        }

        .bee-wing {
            width: 30px;
            height: 20px;
            background: rgba(255, 255, 255, 0.8);
            position: absolute;
            top: -10px;
            border-radius: 50%;
            animation: buzz 0.2s infinite alternate;
        }

        .bee-wing.left { left: 10px; }
        .bee-wing.right { right: 10px; }

        @keyframes buzz {
            from { transform: rotate(-10deg); }
            to { transform: rotate(10deg); }
        }

        /* Update existing insect transitions for faster movement */
        .butterfly { transition: all 0.8s ease-out; }
        .ladybug { transition: all 0.5s ease-out; }
        .ant { transition: all 0.3s linear; }

        /* Add firefly style */
        .firefly {
            position: fixed;
            width: 6px;
            height: 6px;
            background: #ffeb3b;
            border-radius: 50%;
            box-shadow: 0 0 20px #ffeb3b, 0 0 40px #ff9800;
            transition: all 0.3s ease-out;
            z-index: 2;
            animation: glow 1.5s ease-in-out infinite alternate;
        }

        @keyframes glow {
            from { box-shadow: 0 0 5px #ffeb3b; }
            to { box-shadow: 0 0 15px #ffeb3b, 0 0 25px #ff9800; }
        }

        /* Add spider style */
        .spider {
            position: fixed;
            transform: scale(0.3);
            z-index: 2;
        }

        .spider-body {
            width: 40px;
            height: 40px;
            background: #333;
            border-radius: 50%;
            position: relative;
        }

        .spider-leg {
            width: 50px;
            height: 2px;
            background: #333;
            position: absolute;
            transform-origin: 0 50%;
        }

        .spider-thread {
            width: 2px;
            background: rgba(255,255,255,0.3);
            position: absolute;
            top: 0;
            left: 50%;
            transform: translateX(-50%);
        }

        /* Add particle effect for special abilities */
        .particle {
            position: absolute;
            pointer-events: none;
            border-radius: 50%;
            animation: fadeOut 1s forwards;
        }

        @keyframes fadeOut {
            from { opacity: 1; transform: scale(1); }
            to { opacity: 0; transform: scale(0); }
        }

        /* Add trail effect */
        .trail {
            position: absolute;
            pointer-events: none;
            border-radius: 50%;
            animation: fadeTrail 1s forwards;
        }

        @keyframes fadeTrail {
            from { opacity: 0.5; }
            to { opacity: 0; transform: translateY(20px); }
        }

        /* Add web effect for spiders */
        .web {
            position: absolute;
            background: radial-gradient(
                circle,
                rgba(255, 255, 255, 0.15) 0%,
                rgba(255, 255, 255, 0.3) 25%,
                rgba(255, 255, 255, 0.15) 100%
            );
            border: 1px solid rgba(255, 255, 255, 0.5);
            border-radius: 50%;
            pointer-events: none;
            opacity: 0.8;
            z-index: 1;
            transition: opacity 0.5s;
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
        }

        .web-strand {
            position: absolute;
            background: linear-gradient(90deg, 
                transparent, 
                rgba(255, 255, 255, 0.9),
                transparent);
            height: 2px;
            transform-origin: 0 0;
            pointer-events: none;
            opacity: 0.8;
            z-index: 1;
            box-shadow: 0 0 5px rgba(255, 255, 255, 0.5);
        }

        .level-indicator {
            position: fixed;
            background: rgba(0, 0, 0, 0.7);
            color: gold;
            padding: 2px 6px;
            border-radius: 10px;
            font-size: 12px;
            font-weight: bold;
            pointer-events: none;
            z-index: 1000;
            border: 1px solid gold;
            box-shadow: 0 0 5px rgba(255, 215, 0, 0.3);
            font-family: Arial, sans-serif;
            transform: translate(-50%, -100%);
            white-space: nowrap;
        }

        /* Optimize animations by using transform instead of left/top */
        .butterfly, .dragonfly, .bee, .ladybug, .firefly, .spider {
            position: fixed;
            transform-origin: center center;
            will-change: transform;
        }

        /* Optimize particle system */
        .particle-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 1;
        }

        .web {
            position: absolute;
            background: radial-gradient(
                circle,
                rgba(255, 255, 255, 0.15) 0%,
                rgba(255, 255, 255, 0.3) 25%,
                rgba(255, 255, 255, 0.15) 100%
            );
            border: 1px solid rgba(255, 255, 255, 0.5);
            border-radius: 50%;
            pointer-events: none;
            opacity: 0.8;
            z-index: 1;
            transition: opacity 0.5s;
            box-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
        }

        .web-strand {
            position: absolute;
            background: linear-gradient(90deg, 
                transparent, 
                rgba(255, 255, 255, 0.9),
                transparent);
            height: 2px;
            transform-origin: 0 0;
            pointer-events: none;
            opacity: 0.8;
            z-index: 1;
            box-shadow: 0 0 5px rgba(255, 255, 255, 0.5);
        }

        .level-up-effect {
            position: absolute;
            border-radius: 50%;
            pointer-events: none;
            z-index: 1000;
            border: 2px solid gold;
            animation: levelUpPulse 0.5s ease-out;
        }

        @keyframes levelUpPulse {
            0% { transform: scale(1); opacity: 1; }
            100% { transform: scale(2); opacity: 0; }
        }

        @keyframes webPulse {
            0% { opacity: 0.6; }
            100% { opacity: 0.9; }
        }

        @keyframes webStrandWave {
            0% { transform: rotate(var(--rotation)) scaleX(0.95); }
            100% { transform: rotate(var(--rotation)) scaleX(1.05); }
        }

        /* Add after the particle effect styles */
        .teleport-flash {
            position: absolute;
            border-radius: 50%;
            background: radial-gradient(circle, rgba(255,255,255,0.8) 0%, rgba(255,255,255,0) 70%);
            pointer-events: none;
            animation: flash 0.5s forwards;
        }

        .nectar-trail {
            position: absolute;
            width: 4px;
            height: 4px;
            border-radius: 50%;
            background: rgba(255, 223, 0, 0.6);
            pointer-events: none;
            animation: fadeOut 2s forwards;
        }

        .dragonfly-dash {
            position: absolute;
            background: linear-gradient(90deg, transparent, rgba(0, 191, 255, 0.5), transparent);
            height: 2px;
            transform-origin: left center;
            pointer-events: none;
            animation: dashFade 0.3s forwards;
        }

        .firefly-pulse {
            position: absolute;
            border-radius: 50%;
            background: radial-gradient(circle, rgba(255,255,0,0.4) 0%, rgba(255,255,0,0) 70%);
            pointer-events: none;
            animation: pulse 1s infinite;
        }

        @keyframes flash {
            0% { transform: scale(0); opacity: 1; }
            100% { transform: scale(2); opacity: 0; }
        }

        @keyframes dashFade {
            0% { opacity: 0.8; transform: scaleX(1); }
            100% { opacity: 0; transform: scaleX(0.5); }
        }

        @keyframes pulse {
            0% { transform: scale(1); opacity: 0.8; }
            50% { transform: scale(1.5); opacity: 0.4; }
            100% { transform: scale(1); opacity: 0.8; }
        }

        /* Update level system configuration */
        const MAX_LEVEL = 100;
        const LEVEL_SCALE_FACTOR = 0.1; // Reduced to prevent insects from getting too large
        
        /* Add experience system */
        function gainExperience(insect, amount) {
            const state = insects.states.get(insect);
            if (!state) return;

            state.experience = (state.experience || 0) + amount;
            const experienceNeeded = state.level * 100;

            if (state.experience >= experienceNeeded) {
                state.experience -= experienceNeeded;
                levelUp(insect);
            }
        }

        /* Update applyLevelBenefits with more abilities */
        function applyLevelBenefits(insect) {
            const state = insects.states.get(insect);
            const pos = insects.positions.get(insect);
            if (!state || !pos) return;

            /* Common level multiplier */
            const levelMultiplier = 1 + (state.level - 1) * 0.1;

            /* Passive experience gain for all insects */
            if (Math.random() < 0.01) {
                gainExperience(insect, Math.ceil(state.level * 0.5));
            }

            if (insect.classList.contains('butterfly')) {
                /* Butterflies gain experience through movement and teleportation */
                if (Math.random() < 0.01 * levelMultiplier) {
                    const oldPos = { x: pos.x, y: pos.y };
                    
                    /* Level 1-20: Basic teleport */
                    pos.x = random(50, window.innerWidth - 50);
                    pos.y = random(50, window.innerHeight - 50);
                    createTeleportEffect(oldPos.x, oldPos.y, 40 * levelMultiplier);
                    createTeleportEffect(pos.x, pos.y, 40 * levelMultiplier);
                    gainExperience(insect, 10);

                    /* Level 20+: Chain teleport */
                    if (state.level >= 20 && Math.random() < 0.3) {
                        setTimeout(() => {
                            const chainPos = { x: pos.x, y: pos.y };
                            pos.x = random(50, window.innerWidth - 50);
                            pos.y = random(50, window.innerHeight - 50);
                            createTeleportEffect(chainPos.x, chainPos.y, 40 * levelMultiplier);
                            createTeleportEffect(pos.x, pos.y, 40 * levelMultiplier);
                        }, 300);
                    }

                    /* Level 50+: Create mirror images */
                    if (state.level >= 50 && Math.random() < 0.2) {
                        createMirrorImage(insect);
                    }
                }
            } 
            else if (insect.classList.contains('bee')) {
                /* Bees gain experience through pollination and nectar trails */
                if (Math.random() < 0.05 * levelMultiplier) {
                    const trail = createNectarTrail(pos.x, pos.y, state.level);
                    gainExperience(insect, 5);

                    /* Level 15+: Healing nectar */
                    if (state.level >= 15) {
                        healNearbyAllies(insect, trail);
                    }

                    /* Level 30+: Empowering nectar */
                    if (state.level >= 30) {
                        empowerNearbyAllies(insect, trail);
                    }

                    /* Level 70+: Create honey bombs */
                    if (state.level >= 70 && Math.random() < 0.1) {
                        createHoneyBomb(pos.x, pos.y, state.level);
                    }
                }
            }
            else if (insect.classList.contains('dragonfly')) {
                /* Dragonflies gain experience through dashing and aerial maneuvers */
                const vel = insects.velocities.get(insect);
                if (vel && Math.random() < 0.02 * levelMultiplier) {
                    const dashSpeed = 5 * levelMultiplier;
                    vel.x *= dashSpeed;
                    vel.y *= dashSpeed;
                    createDashEffect(pos.x, pos.y, vel.x, vel.y, state.level);
                    gainExperience(insect, 8);

                    /* Level 25+: Sonic boom */
                    if (state.level >= 25) {
                        createSonicBoom(pos.x, pos.y, state.level);
                    }

                    /* Level 45+: Time dilation field */
                    if (state.level >= 45) {
                        createTimeDilationField(insect);
                    }

                    /* Level 80+: Storm caller */
                    if (state.level >= 80 && Math.random() < 0.05) {
                        createStormField(pos.x, pos.y, state.level);
                    }
                }
            }
            else if (insect.classList.contains('spider')) {
                /* Spiders gain experience through web creation and maintenance */
                state.webStrength = 1 + (state.level - 1) * 0.3;
                state.webDuration = 10000 + (state.level - 1) * 2000;
                state.webSize = 80 + (state.level - 1) * 20;

                /* Level 10+: Poisoned webs */
                if (state.level >= 10) {
                    state.webPoison = true;
                }

                /* Level 35+: Web network */
                if (state.level >= 35 && Math.random() < 0.1) {
                    createWebNetwork(insect);
                }

                /* Level 60+: Shadow weaver */
                if (state.level >= 60) {
                    state.shadowWeaver = true;
                }

                /* Level 90+: Reality warper */
                if (state.level >= 90 && Math.random() < 0.01) {
                    createRealityWarp(insect);
                }

                if (Math.random() < 0.05) {
                    gainExperience(insect, 15);
                }
            }
            else if (insect.classList.contains('firefly')) {
                /* Fireflies gain experience through light emission */
                if (Math.random() < 0.03 * levelMultiplier) {
                    createFireflyPulse(pos.x, pos.y, state.level);
                    gainExperience(insect, 6);

                    /* Level 20+: Blinding flash */
                    if (state.level >= 20 && Math.random() < 0.2) {
                        createBlindingFlash(pos.x, pos.y, state.level);
                    }

                    /* Level 40+: Light clones */
                    if (state.level >= 40 && Math.random() < 0.15) {
                        createLightClones(insect);
                    }

                    /* Level 75+: Celestial alignment */
                    if (state.level >= 75 && Math.random() < 0.05) {
                        createCelestialAlignment(insect);
                    }
                }
            }
        }

        /* Add new ability functions */
        function createMirrorImage(insect) {
            const pos = insects.positions.get(insect);
            const state = insects.states.get(insect);
            if (!pos || !state) return;

            const mirror = insect.cloneNode(true);
            mirror.style.opacity = '0.5';
            document.body.appendChild(mirror);

            const mirrorPos = {
                x: pos.x + random(-100, 100),
                y: pos.y + random(-100, 100)
            };

            mirror.style.transform = `translate(${mirrorPos.x}px, ${mirrorPos.y}px) scale(${0.3}) rotate(0deg)`;
            createTeleportEffect(mirrorPos.x, mirrorPos.y, 30);

            setTimeout(() => {
                createTeleportEffect(mirrorPos.x, mirrorPos.y, 30);
                mirror.remove();
            }, 2000);
        }

        function healNearbyAllies(insect, trail) {
            const healRange = 100;
            const healAmount = 20;
            
            document.querySelectorAll('.butterfly, .bee, .dragonfly, .firefly').forEach(ally => {
                if (ally !== insect) {
                    const allyPos = insects.positions.get(ally);
                    if (allyPos && distance(trail.x, trail.y, allyPos.x, allyPos.y) < healRange) {
                        gainExperience(ally, healAmount);
                        createParticle(allyPos.x, allyPos.y, '#00ff00', 3);
                    }
                }
            });
        }

        function empowerNearbyAllies(insect, trail) {
            const empowerRange = 150;
            document.querySelectorAll('.butterfly, .bee, .dragonfly, .firefly').forEach(ally => {
                if (ally !== insect) {
                    const allyPos = insects.positions.get(ally);
                    const allyVel = insects.velocities.get(ally);
                    if (allyPos && allyVel && distance(trail.x, trail.y, allyPos.x, allyPos.y) < empowerRange) {
                        allyVel.x *= 1.5;
                        allyVel.y *= 1.5;
                        createParticle(allyPos.x, allyPos.y, '#ffd700', 3);
                    }
                }
            });
        }

        function createHoneyBomb(x, y, level) {
            const bomb = document.createElement('div');
            bomb.className = 'honey-bomb';
            bomb.style.left = x + 'px';
            bomb.style.top = y + 'px';
            bomb.style.width = (30 + level) + 'px';
            bomb.style.height = (30 + level) + 'px';
            bomb.style.background = 'radial-gradient(circle, rgba(255,223,0,0.8) 0%, rgba(255,223,0,0) 70%)';
            bomb.style.borderRadius = '50%';
            bomb.style.position = 'absolute';
            bomb.style.animation = 'pulse 1s infinite';
            document.body.appendChild(bomb);

            setTimeout(() => {
                createParticle(x, y, '#ffd700', 10);
                bomb.remove();
            }, 2000);
        }

        function createSonicBoom(x, y, level) {
            const boom = document.createElement('div');
            boom.className = 'sonic-boom';
            boom.style.left = x + 'px';
            boom.style.top = y + 'px';
            boom.style.width = (100 + level * 2) + 'px';
            boom.style.height = (100 + level * 2) + 'px';
            boom.style.background = 'radial-gradient(circle, rgba(0,191,255,0.5) 0%, rgba(0,191,255,0) 70%)';
            boom.style.borderRadius = '50%';
            boom.style.position = 'absolute';
            boom.style.animation = 'expand 0.5s forwards';
            document.body.appendChild(boom);

            setTimeout(() => boom.remove(), 500);
        }

        function createTimeDilationField(insect) {
            const pos = insects.positions.get(insect);
            const state = insects.states.get(insect);
            if (!pos || !state) return;

            const field = document.createElement('div');
            field.className = 'time-dilation';
            field.style.left = (pos.x - 100) + 'px';
            field.style.top = (pos.y - 100) + 'px';
            field.style.width = '200px';
            field.style.height = '200px';
            field.style.background = 'radial-gradient(circle, rgba(128,0,128,0.2) 0%, rgba(128,0,128,0) 70%)';
            field.style.borderRadius = '50%';
            field.style.position = 'absolute';
            document.body.appendChild(field);

            /* Slow down all insects in the field */
            const slowEffect = 0.5;
            const interval = setInterval(() => {
                document.querySelectorAll('.butterfly, .bee, .dragonfly, .firefly, .spider').forEach(target => {
                    if (target !== insect) {
                        const targetPos = insects.positions.get(target);
                        const targetVel = insects.velocities.get(target);
                        if (targetPos && targetVel && distance(pos.x, pos.y, targetPos.x, targetPos.y) < 100) {
                            targetVel.x *= slowEffect;
                            targetVel.y *= slowEffect;
                        }
                    }
                });
            }, 100);

            setTimeout(() => {
                clearInterval(interval);
                field.remove();
            }, 3000);
        }

        function createStormField(x, y, level) {
            const radius = 150 + level;
            const duration = 5000;
            const particleCount = 20;

            const storm = document.createElement('div');
            storm.className = 'storm-field';
            storm.style.left = (x - radius) + 'px';
            storm.style.top = (y - radius) + 'px';
            storm.style.width = (radius * 2) + 'px';
            storm.style.height = (radius * 2) + 'px';
            storm.style.background = 'radial-gradient(circle, rgba(0,0,255,0.2) 0%, rgba(0,0,255,0) 70%)';
            storm.style.borderRadius = '50%';
            storm.style.position = 'absolute';
            document.body.appendChild(storm);

            const interval = setInterval(() => {
                for (let i = 0; i < particleCount; i++) {
                    const angle = random(0, Math.PI * 2);
                    const distance = random(0, radius);
                    const particleX = x + Math.cos(angle) * distance;
                    const particleY = y + Math.sin(angle) * distance;
                    createParticle(particleX, particleY, '#00f', 1);
                }
            }, 100);

            setTimeout(() => {
                clearInterval(interval);
                storm.remove();
            }, duration);
        }

        function createWebNetwork(insect) {
            const pos = insects.positions.get(insect);
            const state = insects.states.get(insect);
            if (!pos || !state) return;

            const webCount = 3 + Math.floor(state.level / 10);
            const radius = 100 + state.level;

            for (let i = 0; i < webCount; i++) {
                const angle = (i / webCount) * Math.PI * 2;
                const webX = pos.x + Math.cos(angle) * radius;
                const webY = pos.y + Math.sin(angle) * radius;
                createWeb(insect, webX, webY);
            }
        }

        function createRealityWarp(insect) {
            const pos = insects.positions.get(insect);
            const state = insects.states.get(insect);
            if (!pos || !state) return;

            const warp = document.createElement('div');
            warp.className = 'reality-warp';
            warp.style.left = (pos.x - 200) + 'px';
            warp.style.top = (pos.y - 200) + 'px';
            warp.style.width = '400px';
            warp.style.height = '400px';
            warp.style.background = 'radial-gradient(circle, rgba(0,0,0,0.5) 0%, rgba(0,0,0,0) 70%)';
            warp.style.borderRadius = '50%';
            warp.style.position = 'absolute';
            document.body.appendChild(warp);

            /* Teleport random insects into the web */
            document.querySelectorAll('.butterfly, .bee, .dragonfly, .firefly').forEach(target => {
                if (target !== insect && Math.random() < 0.3) {
                    const targetPos = insects.positions.get(target);
                    if (targetPos) {
                        const oldPos = { x: targetPos.x, y: targetPos.y };
                        targetPos.x = pos.x + random(-100, 100);
                        targetPos.y = pos.y + random(-100, 100);
                        createTeleportEffect(oldPos.x, oldPos.y, 30);
                        createTeleportEffect(targetPos.x, targetPos.y, 30);
                    }
                }
            });

            setTimeout(() => warp.remove(), 2000);
        }

        function createBlindingFlash(x, y, level) {
            const flash = document.createElement('div');
            flash.className = 'blinding-flash';
            flash.style.left = (x - 150) + 'px';
            flash.style.top = (y - 150) + 'px';
            flash.style.width = '300px';
            flash.style.height = '300px';
            flash.style.background = 'radial-gradient(circle, rgba(255,255,255,0.8) 0%, rgba(255,255,255,0) 70%)';
            flash.style.borderRadius = '50%';
            flash.style.position = 'absolute';
            flash.style.animation = 'flash 0.5s forwards';
            document.body.appendChild(flash);

            setTimeout(() => flash.remove(), 500);
        }

        function createLightClones(insect) {
            const pos = insects.positions.get(insect);
            const state = insects.states.get(insect);
            if (!pos || !state) return;

            const cloneCount = Math.min(3 + Math.floor(state.level / 20), 8);
            
            for (let i = 0; i < cloneCount; i++) {
                const clone = insect.cloneNode(true);
                clone.style.opacity = '0.3';
                document.body.appendChild(clone);

                const angle = (i / cloneCount) * Math.PI * 2;
                const radius = 50 + state.level;
                const cloneX = pos.x + Math.cos(angle) * radius;
                const cloneY = pos.y + Math.sin(angle) * radius;

                clone.style.transform = `translate(${cloneX}px, ${cloneY}px) scale(0.3) rotate(${angle * 180 / Math.PI}deg)`;
                createFireflyPulse(cloneX, cloneY, Math.floor(state.level / 2));

                setTimeout(() => clone.remove(), 2000);
            }
        }

        function createCelestialAlignment(insect) {
            const pos = insects.positions.get(insect);
            const state = insects.states.get(insect);
            if (!pos || !state) return;

            const alignment = document.createElement('div');
            alignment.className = 'celestial-alignment';
            alignment.style.left = (pos.x - 300) + 'px';
            alignment.style.top = (pos.y - 300) + 'px';
            alignment.style.width = '600px';
            alignment.style.height = '600px';
            alignment.style.background = 'radial-gradient(circle, rgba(255,223,0,0.3) 0%, rgba(255,223,0,0) 70%)';
            alignment.style.borderRadius = '50%';
            alignment.style.position = 'absolute';
            document.body.appendChild(alignment);

            /* Empower all friendly insects in range */
            document.querySelectorAll('.butterfly, .bee, .dragonfly, .firefly').forEach(ally => {
                const allyPos = insects.positions.get(ally);
                const allyState = insects.states.get(ally);
                if (allyPos && allyState && distance(pos.x, pos.y, allyPos.x, allyPos.y) < 300) {
                    gainExperience(ally, 50);
                    createParticle(allyPos.x, allyPos.y, '#ffd700', 5);
                }
            });

            setTimeout(() => alignment.remove(), 3000);
        }

        /* Ability animations */
        .ability-animation {
            position: absolute;
            pointer-events: none;
            z-index: 1000;
            border-radius: 50%;
        }

        .honey-bomb {
            composes: ability-animation;
            background: radial-gradient(circle, rgba(255,223,0,0.8) 0%, rgba(255,223,0,0) 70%);
            animation: pulse 1s infinite;
        }

        .sonic-boom {
            composes: ability-animation;
            background: radial-gradient(circle, rgba(0,191,255,0.5) 0%, rgba(0,191,255,0) 70%);
            animation: expand 0.5s forwards;
        }

        .time-dilation {
            composes: ability-animation;
            background: radial-gradient(circle, rgba(128,0,128,0.2) 0%, rgba(128,0,128,0) 70%);
        }

        .storm-field {
            composes: ability-animation;
            background: radial-gradient(circle, rgba(0,0,255,0.2) 0%, rgba(0,0,255,0) 70%);
        }

        .reality-warp {
            composes: ability-animation;
            background: radial-gradient(circle, rgba(0,0,0,0.5) 0%, rgba(0,0,0,0) 70%);
        }

        .blinding-flash {
            composes: ability-animation;
            background: radial-gradient(circle, rgba(255,255,255,0.8) 0%, rgba(255,255,255,0) 70%);
            animation: flash 0.5s forwards;
        }

        .celestial-alignment {
            composes: ability-animation;
            background: radial-gradient(circle, rgba(255,223,0,0.3) 0%, rgba(255,223,0,0) 70%);
        }

        @keyframes expand {
            from { 
                transform: scale(0); 
                opacity: 0.5; 
            }
            to { 
                transform: scale(1); 
                opacity: 0; 
            }
        }

        @keyframes pulse {
            0% { 
                transform: scale(1); 
                opacity: 0.8; 
            }
            50% { 
                transform: scale(1.2); 
                opacity: 0.4; 
            }
            100% { 
                transform: scale(1); 
                opacity: 0.8; 
            }
        }

        @keyframes flash {
            0% {
                transform: scale(0);
                opacity: 1;
            }
            100% {
                transform: scale(2);
                opacity: 0;
            }
        }

        /* Remove the old style injection code */
        // ... existing code ...
    </style>
    <!-- Add new styles for abilities -->
    <style>
        .ability-animation {
            position: absolute;
            pointer-events: none;
            z-index: 1000;
            border-radius: 50%;
        }

        .honey-bomb {
            composes: ability-animation;
            background: radial-gradient(circle, rgba(255,223,0,0.8) 0%, rgba(255,223,0,0) 70%);
            animation: pulse 1s infinite;
        }

        .sonic-boom {
            composes: ability-animation;
            background: radial-gradient(circle, rgba(0,191,255,0.5) 0%, rgba(0,191,255,0) 70%);
            animation: expand 0.5s forwards;
        }

        .time-dilation {
            composes: ability-animation;
            background: radial-gradient(circle, rgba(128,0,128,0.2) 0%, rgba(128,0,128,0) 70%);
        }

        .storm-field {
            composes: ability-animation;
            background: radial-gradient(circle, rgba(0,0,255,0.2) 0%, rgba(0,0,255,0) 70%);
        }

        .reality-warp {
            composes: ability-animation;
            background: radial-gradient(circle, rgba(0,0,0,0.5) 0%, rgba(0,0,0,0) 70%);
        }

        .blinding-flash {
            composes: ability-animation;
            background: radial-gradient(circle, rgba(255,255,255,0.8) 0%, rgba(255,255,255,0) 70%);
            animation: flash 0.5s forwards;
        }

        .celestial-alignment {
            composes: ability-animation;
            background: radial-gradient(circle, rgba(255,223,0,0.3) 0%, rgba(255,223,0,0) 70%);
        }

        @keyframes expand {
            from { 
                transform: scale(0); 
                opacity: 0.5; 
            }
            to { 
                transform: scale(1); 
                opacity: 0; 
            }
        }

        @keyframes pulse {
            0% { 
                transform: scale(1); 
                opacity: 0.8; 
            }
            50% { 
                transform: scale(1.2); 
                opacity: 0.4; 
            }
            100% { 
                transform: scale(1); 
                opacity: 0.8; 
            }
        }

        @keyframes flash {
            0% {
                transform: scale(0);
                opacity: 1;
            }
            100% {
                transform: scale(2);
                opacity: 0;
            }
        }
    </style>
</head>
<body>
    <div class="particle-container"></div>
    <!-- Create more instances of each insect type -->
    <!-- Butterflies -->
    <div class="butterfly" style="transform: scale(0.3);">
        <div class="butterfly-body"></div>
        <div class="butterfly-wing left"></div>
        <div class="butterfly-wing right"></div>
    </div>
    <div class="butterfly" style="transform: scale(0.3);">
        <div class="butterfly-body"></div>
        <div class="butterfly-wing left"></div>
        <div class="butterfly-wing right"></div>
    </div>
    <div class="butterfly" style="transform: scale(0.3);">
        <div class="butterfly-body"></div>
        <div class="butterfly-wing left"></div>
        <div class="butterfly-wing right"></div>
    </div>

    <!-- Dragonflies -->
    <div class="dragonfly">
        <div class="dragonfly-body">
            <div class="dragonfly-wing top-left"></div>
            <div class="dragonfly-wing top-right"></div>
            <div class="dragonfly-wing bottom-left"></div>
            <div class="dragonfly-wing bottom-right"></div>
        </div>
    </div>
    <div class="dragonfly">
        <div class="dragonfly-body">
            <div class="dragonfly-wing top-left"></div>
            <div class="dragonfly-wing top-right"></div>
            <div class="dragonfly-wing bottom-left"></div>
            <div class="dragonfly-wing bottom-right"></div>
        </div>
    </div>

    <!-- Bees -->
    <div class="bee">
        <div class="bee-body">
            <div class="bee-wing left"></div>
            <div class="bee-wing right"></div>
        </div>
    </div>
    <div class="bee">
        <div class="bee-body">
            <div class="bee-wing left"></div>
            <div class="bee-wing right"></div>
        </div>
    </div>
    <div class="bee">
        <div class="bee-body">
            <div class="bee-wing left"></div>
            <div class="bee-wing right"></div>
        </div>
    </div>

    <!-- Ladybugs -->
    <div class="ladybug" style="transform: scale(0.4);">
        <div class="ladybug-body">
            <div class="ladybug-head"></div>
            <div class="ladybug-spot"></div>
            <div class="ladybug-spot"></div>
            <div class="ladybug-spot"></div>
            <div class="ladybug-spot"></div>
            <div class="ladybug-spot"></div>
            <div class="ladybug-spot"></div>
        </div>
    </div>
    <div class="ladybug" style="transform: scale(0.4);">
        <div class="ladybug-body">
            <div class="ladybug-head"></div>
            <div class="ladybug-spot"></div>
            <div class="ladybug-spot"></div>
            <div class="ladybug-spot"></div>
            <div class="ladybug-spot"></div>
            <div class="ladybug-spot"></div>
            <div class="ladybug-spot"></div>
        </div>
    </div>

    <!-- Fireflies -->
    <div class="firefly"></div>
    <div class="firefly"></div>
    <div class="firefly"></div>
    <div class="firefly"></div>
    <div class="firefly"></div>
    <div class="firefly"></div>
    <div class="firefly"></div>
    <div class="firefly"></div>

    <!-- Spiders -->
    <div class="spider">
        <div class="spider-thread"></div>
        <div class="spider-body">
            <div class="spider-leg" style="transform: rotate(30deg)"></div>
            <div class="spider-leg" style="transform: rotate(60deg)"></div>
            <div class="spider-leg" style="transform: rotate(120deg)"></div>
            <div class="spider-leg" style="transform: rotate(150deg)"></div>
            <div class="spider-leg" style="transform: rotate(210deg)"></div>
            <div class="spider-leg" style="transform: rotate(240deg)"></div>
            <div class="spider-leg" style="transform: rotate(300deg)"></div>
            <div class="spider-leg" style="transform: rotate(330deg)"></div>
        </div>
    </div>
    <div class="spider">
        <div class="spider-thread"></div>
        <div class="spider-body">
            <div class="spider-leg" style="transform: rotate(30deg)"></div>
            <div class="spider-leg" style="transform: rotate(60deg)"></div>
            <div class="spider-leg" style="transform: rotate(120deg)"></div>
            <div class="spider-leg" style="transform: rotate(150deg)"></div>
            <div class="spider-leg" style="transform: rotate(210deg)"></div>
            <div class="spider-leg" style="transform: rotate(240deg)"></div>
            <div class="spider-leg" style="transform: rotate(300deg)"></div>
            <div class="spider-leg" style="transform: rotate(330deg)"></div>
        </div>
    </div>

    <div class="project-container">
        <div class="header">
            <h1>Fascinating Insects</h1>
            <p>Discover the amazing world of insects</p>
        </div>

        <div class="products-grid">
            <div class="product-card">
                <img src="https://images.unsplash.com/photo-1557980168-cb6d70994120" alt="Blue Morpho Butterfly" class="product-image">
                <h2 class="product-title">Blue Morpho Butterfly Print</h2>
                <p class="product-description">Beautiful high-resolution print of the stunning Blue Morpho butterfly, known for its iridescent blue wings.</p>
                <div class="product-price">$29.99</div>
                <button class="buy-button">Add to Cart</button>
            </div>

            <div class="product-card">
                <img src="https://images.unsplash.com/photo-1589642314445-382abf92c4c3" alt="Praying Mantis" class="product-image">
                <h2 class="product-title">Praying Mantis Photo</h2>
                <p class="product-description">Stunning close-up photograph of a praying mantis in its natural habitat, showing incredible detail.</p>
                <div class="product-price">$24.99</div>
                <button class="buy-button">Add to Cart</button>
            </div>

            <div class="product-card">
                <img src="https://images.unsplash.com/photo-1591100909594-483b563bba6b" alt="Ladybug" class="product-image">
                <h2 class="product-title">Ladybug Canvas Print</h2>
                <p class="product-description">Vibrant macro photography of a ladybug on a leaf, perfect for nature lovers and insect enthusiasts.</p>
                <div class="product-price">$34.99</div>
                <button class="buy-button">Add to Cart</button>
            </div>
        </div>
    </div>

    <script>
        document.querySelectorAll('.buy-button').forEach(button => {
            button.addEventListener('click', () => {
                alert('Product added to cart!');
            });
        });

        // Utility function to get random number between min and max
        function random(min, max) {
            return Math.random() * (max - min) + min;
        }

        // Utility functions for insect interaction
        function distance(x1, y1, x2, y2) {
            return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2);
        }

        function getInsectPosition(insect) {
            const rect = insect.getBoundingClientRect();
            return {
                x: rect.left + rect.width / 2,
                y: rect.top + rect.height / 2
            };
        }

        // Global state for all insects
        const insects = {
            positions: new Map(),
            velocities: new Map(),
            states: new Map()
        };

        // Performance optimization variables
        const PARTICLE_LIMIT = 50;
        const TRAIL_LIMIT = 20;
        const FRAME_RATE = 1000 / 60; // 60 FPS
        let lastFrameTime = 0;
        let activeParticles = 0;
        let activeTrails = 0;
        const particleContainer = document.querySelector('.particle-container');

        // Level system configuration
        const MAX_LEVEL = 100;
        const LEVEL_SCALE_FACTOR = 0.1; // Reduced to prevent insects from getting too large
        
        // Initialize insect with level properties
        function initializeInsect(insect) {
            if (!insects.positions.has(insect)) {
                const pos = {
                    x: random(0, window.innerWidth - 50),
                    y: random(0, window.innerHeight - 50)
                };
                
                insects.positions.set(insect, pos);
                insects.velocities.set(insect, {
                    x: random(-2, 2),
                    y: random(-2, 2)
                });
                insects.states.set(insect, {
                    fleeing: false,
                    chasing: false,
                    target: null,
                    level: 1,
                    kills: 0,
                    killsToLevel: 2
                });

                // Set initial scale based on insect type
                const baseScale = insect.classList.contains('spider') ? 0.3 :
                               insect.classList.contains('butterfly') ? 0.3 :
                               insect.classList.contains('bee') ? 0.4 : 0.4;

                // Apply initial transform with position, scale, and rotation
                insect.style.transform = `translate(${pos.x}px, ${pos.y}px) scale(${baseScale}) rotate(0deg)`;

                // Initialize level indicator
                if (!insect.levelIndicator) {
                    const indicator = createLevelIndicator(insect);
                    insect.levelIndicator = indicator;
                    updateLevelIndicator(insect);
                }
            }
        }

        // Initialize all insects immediately
        function initializeAllInsects() {
            document.querySelectorAll('.butterfly, .dragonfly, .bee, .ladybug, .firefly, .spider').forEach(insect => {
                initializeInsect(insect);
                updateLevelIndicator(insect);
            });
        }

        // Update position with transform
        function updateInsectPosition(insect) {
            const pos = insects.positions.get(insect);
            const vel = insects.velocities.get(insect);
            const state = insects.states.get(insect);

            if (!pos || !vel) return;

            // Check for nectar trail effects
            const nectarTrails = document.querySelectorAll('.nectar-trail');
            let totalSlowEffect = 1;

            nectarTrails.forEach(trail => {
                const trailRect = trail.getBoundingClientRect();
                const trailX = trailRect.left + trailRect.width/2;
                const trailY = trailRect.top + trailRect.height/2;
                const dist = distance(pos.x, pos.y, trailX, trailY);
                
                if (dist < 30) {
                    totalSlowEffect *= 0.8;
                }
            });

            // Apply nectar slow effect to velocity
            vel.x *= totalSlowEffect;
            vel.y *= totalSlowEffect;

            // Check if insect is caught in web
            const isTrapped = checkWebCollision(insect);
            
            // Update velocity with some randomness
            vel.x += random(-0.1, 0.1);
            vel.y += random(-0.1, 0.1);

            // Apply web slowdown effect
            if (isTrapped) {
                vel.x *= 0.8;
                vel.y *= 0.8;
                
                if (Math.random() < 0.1) {
                    createParticle(pos.x, pos.y, 'rgba(255, 255, 255, 0.8)', 1);
                }
            }

            // Limit velocity
            const speed = Math.sqrt(vel.x * vel.x + vel.y * vel.y);
            const maxSpeed = isTrapped ? 1 : 3;
            if (speed > maxSpeed) {
                const scale = maxSpeed / speed;
                vel.x *= scale;
                vel.y *= scale;
            }

            // Update position
            pos.x += vel.x;
            pos.y += vel.y;

            // Bounce off viewport boundaries
            const viewportWidth = window.innerWidth - 50;
            const viewportHeight = window.innerHeight - 50;

            if (pos.x < 0) {
                pos.x = 0;
                vel.x *= -1;
            }
            if (pos.x > viewportWidth) {
                pos.x = viewportWidth;
                vel.x *= -1;
            }
            if (pos.y < 0) {
                pos.y = 0;
                vel.y *= -1;
            }
            if (pos.y > viewportHeight) {
                pos.y = viewportHeight;
                vel.y *= -1;
            }

            // Calculate rotation based on velocity
            const angle = Math.atan2(vel.y, vel.x) * (180/Math.PI);
            
            // Get the current scale from transform
            const currentTransform = insect.style.transform || '';
            const scaleMatch = currentTransform.match(/scale\(([^)]+)\)/);
            let scaleValue = '1';
            if (scaleMatch && scaleMatch[1]) {
                scaleValue = scaleMatch[1];
            }

            // Apply transform with the existing scale
            insect.style.transform = `translate(${pos.x}px, ${pos.y}px) scale(${scaleValue}) rotate(${angle}deg)`;

            // Update level indicator
            updateLevelIndicator(insect);
        }

        // Add level up functionality
        function levelUp(insect) {
            const state = insects.states.get(insect);
            if (!state || state.level >= MAX_LEVEL) return;

            state.level++;
            state.kills = 0;
            state.killsToLevel = state.level * 2;

            // Calculate new scale based on level and insect type
            let baseScale;
            let levelScale;
            
            if (insect.classList.contains('spider')) {
                baseScale = 0.3;
                levelScale = 1 + (state.level - 1) * LEVEL_SCALE_FACTOR;
            } else {
                baseScale = insect.classList.contains('butterfly') ? 0.3 :
                          insect.classList.contains('bee') ? 0.4 : 0.4;
                levelScale = 1 + (state.level - 1) * LEVEL_SCALE_FACTOR;
            }

            const newScale = (baseScale * levelScale).toFixed(2);

            // Get current transform and update only the scale part
            const currentTransform = insect.style.transform || '';
            const pos = insects.positions.get(insect);
            const vel = insects.velocities.get(insect);
            const angle = vel ? Math.atan2(vel.y, vel.x) * (180/Math.PI) : 0;

            // Apply new transform with updated scale
            insect.style.transform = `translate(${pos.x}px, ${pos.y}px) scale(${newScale}) rotate(${angle}deg)`;

            // Create level up effect
            createLevelUpEffect(insect);

            // Apply level-specific enhancements
            applyLevelBenefits(insect);
        }

        function createLevelUpEffect(insect) {
            const pos = insects.positions.get(insect);
            if (!pos) return;

            // Create gold ring effect
            const effect = document.createElement('div');
            effect.className = 'level-up-effect';
            effect.style.left = (pos.x - 25) + 'px';
            effect.style.top = (pos.y - 25) + 'px';
            effect.style.width = '50px';
            effect.style.height = '50px';
            document.body.appendChild(effect);

            // Create particles
            for (let i = 0; i < 8; i++) {
                createParticle(pos.x, pos.y, '#FFD700', 1); // Gold particles
            }

            // Remove effect after animation
            setTimeout(() => effect.remove(), 500);
        }

        function applyLevelBenefits(insect) {
            const state = insects.states.get(insect);
            const pos = insects.positions.get(insect);
            if (!state || !pos) return;

            // Common level multiplier
            const levelMultiplier = 1 + (state.level - 1) * 0.1;

            // Passive experience gain for all insects
            if (Math.random() < 0.01) {
                gainExperience(insect, Math.ceil(state.level * 0.5));
            }

            if (insect.classList.contains('butterfly')) {
                // Butterflies gain experience through movement and teleportation
                if (Math.random() < 0.01 * levelMultiplier) {
                    const oldPos = { x: pos.x, y: pos.y };
                    
                    // Level 1-20: Basic teleport
                    pos.x = random(50, window.innerWidth - 50);
                    pos.y = random(50, window.innerHeight - 50);
                    createTeleportEffect(oldPos.x, oldPos.y, 40 * levelMultiplier);
                    createTeleportEffect(pos.x, pos.y, 40 * levelMultiplier);
                    gainExperience(insect, 10);

                    // Level 20+: Chain teleport
                    if (state.level >= 20 && Math.random() < 0.3) {
                        setTimeout(() => {
                            const chainPos = { x: pos.x, y: pos.y };
                            pos.x = random(50, window.innerWidth - 50);
                            pos.y = random(50, window.innerHeight - 50);
                            createTeleportEffect(chainPos.x, chainPos.y, 40 * levelMultiplier);
                            createTeleportEffect(pos.x, pos.y, 40 * levelMultiplier);
                        }, 300);
                    }

                    // Level 50+: Create mirror images
                    if (state.level >= 50 && Math.random() < 0.2) {
                        createMirrorImage(insect);
                    }
                }
            } 
            else if (insect.classList.contains('bee')) {
                // Bees gain experience through pollination and nectar trails
                if (Math.random() < 0.05 * levelMultiplier) {
                    const trail = createNectarTrail(pos.x, pos.y, state.level);
                    gainExperience(insect, 5);

                    // Level 15+: Healing nectar
                    if (state.level >= 15) {
                        healNearbyAllies(insect, trail);
                    }

                    // Level 30+: Empowering nectar
                    if (state.level >= 30) {
                        empowerNearbyAllies(insect, trail);
                    }

                    // Level 70+: Create honey bombs
                    if (state.level >= 70 && Math.random() < 0.1) {
                        createHoneyBomb(pos.x, pos.y, state.level);
                    }
                }
            }
            else if (insect.classList.contains('dragonfly')) {
                // Dragonflies gain experience through dashing and aerial maneuvers
                const vel = insects.velocities.get(insect);
                if (vel && Math.random() < 0.02 * levelMultiplier) {
                    const dashSpeed = 5 * levelMultiplier;
                    vel.x *= dashSpeed;
                    vel.y *= dashSpeed;
                    createDashEffect(pos.x, pos.y, vel.x, vel.y, state.level);
                    gainExperience(insect, 8);

                    // Level 25+: Sonic boom
                    if (state.level >= 25) {
                        createSonicBoom(pos.x, pos.y, state.level);
                    }

                    // Level 45+: Time dilation field
                    if (state.level >= 45) {
                        createTimeDilationField(insect);
                    }

                    // Level 80+: Storm caller
                    if (state.level >= 80 && Math.random() < 0.05) {
                        createStormField(pos.x, pos.y, state.level);
                    }
                }
            }
            else if (insect.classList.contains('spider')) {
                // Spiders gain experience through web creation and maintenance
                state.webStrength = 1 + (state.level - 1) * 0.3;
                state.webDuration = 10000 + (state.level - 1) * 2000;
                state.webSize = 80 + (state.level - 1) * 20;

                // Level 10+: Poisoned webs
                if (state.level >= 10) {
                    state.webPoison = true;
                }

                // Level 35+: Web network
                if (state.level >= 35 && Math.random() < 0.1) {
                    createWebNetwork(insect);
                }

                // Level 60+: Shadow weaver
                if (state.level >= 60) {
                    state.shadowWeaver = true;
                }

                // Level 90+: Reality warper
                if (state.level >= 90 && Math.random() < 0.01) {
                    createRealityWarp(insect);
                }

                if (Math.random() < 0.05) {
                    gainExperience(insect, 15);
                }
            }
            else if (insect.classList.contains('firefly')) {
                // Fireflies gain experience through light emission
                if (Math.random() < 0.03 * levelMultiplier) {
                    createFireflyPulse(pos.x, pos.y, state.level);
                    gainExperience(insect, 6);

                    // Level 20+: Blinding flash
                    if (state.level >= 20 && Math.random() < 0.2) {
                        createBlindingFlash(pos.x, pos.y, state.level);
                    }

                    // Level 40+: Light clones
                    if (state.level >= 40 && Math.random() < 0.15) {
                        createLightClones(insect);
                    }

                    // Level 75+: Celestial alignment
                    if (state.level >= 75 && Math.random() < 0.05) {
                        createCelestialAlignment(insect);
                    }
                }
            }
        }

        function createTeleportEffect(x, y, size) {
            const flash = document.createElement('div');
            flash.className = 'teleport-flash';
            flash.style.left = (x - size/2) + 'px';
            flash.style.top = (y - size/2) + 'px';
            flash.style.width = size + 'px';
            flash.style.height = size + 'px';
            document.body.appendChild(flash);
            setTimeout(() => flash.remove(), 500);
        }

        function createNectarTrail(x, y, level) {
            const trail = document.createElement('div');
            trail.className = 'nectar-trail';
            trail.style.left = x + 'px';
            trail.style.top = y + 'px';
            trail.style.width = (4 + level) + 'px';
            trail.style.height = (4 + level) + 'px';
            document.body.appendChild(trail);
            
            // Nectar trails can slow down predators
            const slowEffect = 0.2 * level;
            const range = 30 + (level * 5);
            
            setTimeout(() => trail.remove(), 2000);
            return { x, y, range, slowEffect };
        }

        function createDashEffect(x, y, velX, velY, level) {
            const dash = document.createElement('div');
            dash.className = 'dragonfly-dash';
            dash.style.left = x + 'px';
            dash.style.top = y + 'px';
            
            const angle = Math.atan2(velY, velX) * (180/Math.PI);
            const length = 50 + (level * 10);
            
            dash.style.width = length + 'px';
            dash.style.transform = `rotate(${angle}deg)`;
            
            document.body.appendChild(dash);
            setTimeout(() => dash.remove(), 300);
        }

        function createFireflyPulse(x, y, level) {
            const pulse = document.createElement('div');
            pulse.className = 'firefly-pulse';
            pulse.style.left = (x - 25) + 'px';
            pulse.style.top = (y - 25) + 'px';
            pulse.style.width = (50 + level * 10) + 'px';
            pulse.style.height = (50 + level * 10) + 'px';
            document.body.appendChild(pulse);
            setTimeout(() => pulse.remove(), 1000);
        }

        // Update movement functions to include ability checks
        function moveButterflies() {
            document.querySelectorAll('.butterfly').forEach(butterfly => {
                if (!insects.positions.has(butterfly)) {
                    initializeInsect(butterfly);
                }
                updateInsectPosition(butterfly);
                applyLevelBenefits(butterfly);
                handleReproduction(butterfly, 'butterfly', 0.001, 10);
            });
        }

        function moveDragonflies() {
            const dragonflies = document.querySelectorAll('.dragonfly');
            const fireflies = document.querySelectorAll('.firefly');
            
            dragonflies.forEach(dragonfly => {
                if (!insects.positions.has(dragonfly)) {
                    initializeInsect(dragonfly);
                }
                updateInsectPosition(dragonfly);
                applyLevelBenefits(dragonfly);
                fireflies.forEach(firefly => handlePredatorPrey(dragonfly, firefly, 'dragonfly', 'firefly', 40));
            });
        }

        function moveBees() {
            document.querySelectorAll('.bee').forEach(bee => {
                if (!insects.positions.has(bee)) {
                    initializeInsect(bee);
                }
                updateInsectPosition(bee);
                applyLevelBenefits(bee);
                handleReproduction(bee, 'bee', 0.002, 8);
            });
        }

        function moveSpiders() {
            const spiders = document.querySelectorAll('.spider');
            const bees = document.querySelectorAll('.bee');
            const butterflies = document.querySelectorAll('.butterfly');
            
            spiders.forEach(spider => {
                if (!insects.positions.has(spider)) {
                    initializeInsect(spider);
                }

                const spiderPos = insects.positions.get(spider);
                const spiderVel = insects.velocities.get(spider);
                
                if (!spiderPos || !spiderVel) return;

                // Find nearest trapped insect
                const nearestTrapped = findNearestTrappedInsect(spider);
                
                if (nearestTrapped) {
                    const trappedPos = insects.positions.get(nearestTrapped);
                    if (trappedPos) {
                        const dist = Math.sqrt(
                            (spiderPos.x - trappedPos.x) ** 2 + 
                            (spiderPos.y - trappedPos.y) ** 2
                        );

                        if (dist > 50) {
                            spiderVel.x += (trappedPos.x - spiderPos.x) * 0.05;
                            spiderVel.y += (trappedPos.y - spiderPos.y) * 0.05;
                            
                            if (Math.random() < 0.1) {
                                createParticle(spiderPos.x, spiderPos.y, '#8B0000', 1);
                            }
                        }

                        handlePredatorPrey(spider, nearestTrapped, 'spider', nearestTrapped.classList[0], 40);
                    }
                } else {
                    bees.forEach(bee => handlePredatorPrey(spider, bee, 'spider', 'bee', 30));
                    butterflies.forEach(butterfly => handlePredatorPrey(spider, butterfly, 'spider', 'butterfly', 30));
                }

                updateInsectPosition(spider);
                
                if (Math.random() < 0.005) {
                    createWeb(spider);
                }
                
                const legs = spider.querySelectorAll('.spider-leg');
                const legAnimationSpeed = nearestTrapped ? 100 : 200;
                const legWiggleAmount = nearestTrapped ? 25 : 15;
                
                legs.forEach((leg, i) => {
                    const baseAngle = (i * 45) + 30;
                    const wiggle = Math.sin(Date.now() / legAnimationSpeed + i) * legWiggleAmount;
                    leg.style.transform = `rotate(${baseAngle + wiggle}deg)`;
                });
            });
        }

        function moveFireflies() {
            document.querySelectorAll('.firefly').forEach(firefly => {
                if (!insects.positions.has(firefly)) {
                    initializeInsect(firefly);
                }
                updateInsectPosition(firefly);
                applyLevelBenefits(firefly);
                handleReproduction(firefly, 'firefly', 0.003, 15);
            });
        }

        // Update the animation loop
        function animate(timestamp) {
            if (!lastFrameTime) {
                lastFrameTime = timestamp;
                initializeAllInsects();
            }

            const deltaTime = timestamp - lastFrameTime;
            
            if (deltaTime >= FRAME_RATE) {
                moveButterflies();
                moveDragonflies();
                moveBees();
                moveSpiders();
                moveFireflies();
                
                lastFrameTime = timestamp;
            }
            
            requestAnimationFrame(animate);
        }

        // Start animation when page loads
        window.addEventListener('load', () => {
            // Create global insects state object
            window.insects = {
                positions: new Map(),
                velocities: new Map(),
                states: new Map()
            };
            
            // Start the animation loop
            requestAnimationFrame(animate);
        });

        // Optimized resize handler
        let resizeTimeout;
        window.addEventListener('resize', () => {
            if (resizeTimeout) {
                clearTimeout(resizeTimeout);
            }
            resizeTimeout = setTimeout(() => {
                document.querySelectorAll('.butterfly, .dragonfly, .bee, .ladybug, .firefly, .spider').forEach(insect => {
                    if (insect.levelIndicator) {
                        insect.levelIndicator.remove();
                        delete insect.levelIndicator;
                    }
                });
                insects.positions.clear();
                insects.velocities.clear();
                insects.states.clear();
                initializeAllInsects();
            }, 250);
        });

        // Add after the existing particle effect function
        const webs = new Set();
        const WEB_LIMIT = 10;

        function createWeb(spider) {
            if (webs.size >= WEB_LIMIT) {
                const oldestWeb = webs.values().next().value;
                if (oldestWeb) {
                    oldestWeb.remove();
                    webs.delete(oldestWeb);
                }
            }

            const pos = insects.positions.get(spider);
            const state = insects.states.get(spider);
            if (!pos || !state) return;

            // Web size increases with level
            const baseSize = 80;
            const webSize = baseSize * (1 + (state.level - 1) * 0.2);

            const web = document.createElement('div');
            web.className = 'web';
            web.style.left = (pos.x - webSize/2) + 'px';
            web.style.top = (pos.y - webSize/2) + 'px';
            web.style.width = webSize + 'px';
            web.style.height = webSize + 'px';

            // Add pulsing animation for better visibility
            web.style.animation = 'webPulse 2s infinite alternate';
            document.body.appendChild(web);
            webs.add(web);

            // Create more visible web strands
            const numStrands = 12; // Increased number of strands
            for (let i = 0; i < numStrands; i++) {
                const strand = document.createElement('div');
                strand.className = 'web-strand';
                strand.style.left = pos.x + 'px';
                strand.style.top = pos.y + 'px';
                strand.style.width = (webSize/2) + 'px';
                strand.style.transform = `rotate(${(i * 360 / numStrands)}deg)`;
                
                // Add slight animation to strands
                strand.style.animation = `webStrandWave ${2 + Math.random()}s infinite alternate`;
                web.appendChild(strand);
            }

            // Add inner web pattern for better visibility
            for (let i = 1; i <= 3; i++) {
                const innerWeb = document.createElement('div');
                innerWeb.className = 'web';
                const innerSize = webSize * (0.75 - i * 0.15);
                innerWeb.style.left = (webSize - innerSize) / 2 + 'px';
                innerWeb.style.top = (webSize - innerSize) / 2 + 'px';
                innerWeb.style.width = innerSize + 'px';
                innerWeb.style.height = innerSize + 'px';
                web.appendChild(innerWeb);
            }

            // Web duration increases with level
            const webDuration = 10000 + (state.level - 1) * 2000;
            setTimeout(() => {
                web.style.opacity = '0';
                setTimeout(() => {
                    web.remove();
                    webs.delete(web);
                }, 500);
            }, webDuration);

            return web;
        }

        function checkWebCollision(insect) {
            if (insect.classList.contains('spider')) return false;

            const pos = insects.positions.get(insect);
            if (!pos) return false;

            for (const web of webs) {
                const webRect = web.getBoundingClientRect();
                const insectInWeb = 
                    pos.x >= webRect.left && 
                    pos.x <= webRect.right && 
                    pos.y >= webRect.top && 
                    pos.y <= webRect.bottom;

                if (insectInWeb) {
                    return true;
                }
            }
            return false;
        }

        // Add this function after checkWebCollision
        function findTrappedInsects() {
            const trappedInsects = new Map();
            
            document.querySelectorAll('.bee, .butterfly, .firefly').forEach(insect => {
                if (checkWebCollision(insect)) {
                    const pos = insects.positions.get(insect);
                    if (pos) {
                        trappedInsects.set(insect, pos);
                    }
                }
            });
            
            return trappedInsects;
        }

        // Add this function to find nearest trapped insect
        function findNearestTrappedInsect(spider) {
            const spiderPos = insects.positions.get(spider);
            if (!spiderPos) return null;

            const trappedInsects = findTrappedInsects();
            let nearestInsect = null;
            let shortestDistance = Infinity;

            trappedInsects.forEach((pos, insect) => {
                const dist = Math.sqrt(
                    (spiderPos.x - pos.x) ** 2 + 
                    (spiderPos.y - pos.y) ** 2
                );
                
                if (dist < shortestDistance) {
                    shortestDistance = dist;
                    nearestInsect = insect;
                }
            });

            return nearestInsect;
        }

        // Add after the initializeInsect function
        function createLevelIndicator(insect) {
            const indicator = document.createElement('div');
            indicator.className = 'level-indicator';
            document.body.appendChild(indicator);
            return indicator;
        }

        function updateLevelIndicator(insect) {
            // Ensure insect has state
            if (!insects.states.has(insect)) {
                initializeInsect(insect);
            }

            let indicator = insect.levelIndicator;
            if (!indicator) {
                indicator = createLevelIndicator(insect);
                insect.levelIndicator = indicator;
            }

            const state = insects.states.get(insect);
            const pos = insects.positions.get(insect);
            if (!state || !pos) return;

            // Get the insect's current scale from transform
            const transform = insect.style.transform || '';
            const scaleMatch = transform.match(/scale\(([^)]+)\)/);
            const scale = scaleMatch ? parseFloat(scaleMatch[1]) : 1;

            // Position indicator above insect, accounting for scale
            const yOffset = 30 * scale;
            indicator.style.left = `${pos.x}px`;
            indicator.style.top = `${pos.y - yOffset}px`;
            
            // Update level text and add kills progress
            indicator.textContent = `Lv${state.level} (${state.kills}/${state.killsToLevel})`;

            // Color coding based on level
            const hue = Math.min(45 + (state.level - 1) * 15, 120);
            indicator.style.color = `hsl(${hue}, 100%, 50%)`;
        }

        // Add cleanup on window unload
        window.addEventListener('unload', () => {
            document.querySelectorAll('.butterfly, .dragonfly, .bee, .ladybug, .firefly, .spider').forEach(insect => {
                if (insect.levelIndicator) {
                    insect.levelIndicator.remove();
                    delete insect.levelIndicator;
                }
            });
        });

        // Update spider initialization in the HTML
        // Find all spider elements and update their initial scale
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.spider').forEach(spider => {
                const currentTransform = spider.style.transform || '';
                // Set initial scale for spiders
                if (!currentTransform.includes('scale')) {
                    spider.style.transform = currentTransform + ' scale(0.3)';
                }
            });
        });

        // Restore the handlePredatorPrey function
        function handlePredatorPrey(predator, prey, predatorClass, preyClass, catchDistance) {
            if (!predator.classList.contains(predatorClass) || !prey.classList.contains(preyClass)) return;
            
            const predatorPos = insects.positions.get(predator);
            const preyPos = insects.positions.get(prey);
            const predatorState = insects.states.get(predator);
            
            if (!predatorPos || !preyPos || !predatorState) return;
            
            const leveledCatchDistance = catchDistance * (1 + (predatorState.level - 1) * 0.2);
            
            const dist = Math.sqrt(
                (predatorPos.x - preyPos.x) ** 2 + 
                (predatorPos.y - preyPos.y) ** 2
            );
            
            const isTrapped = checkWebCollision(prey);
            const effectiveCatchDistance = isTrapped ? leveledCatchDistance * 2 : leveledCatchDistance;
            
            if (dist < effectiveCatchDistance) {
                // Remove level indicator before removing prey
                if (prey.levelIndicator) {
                    prey.levelIndicator.remove();
                    delete prey.levelIndicator;
                }
                
                // Remove the prey
                prey.remove();
                insects.positions.delete(prey);
                insects.velocities.delete(prey);
                insects.states.delete(prey);
                
                // Create eating effect
                const particleCount = isTrapped ? 8 : 5;
                createParticle(preyPos.x, preyPos.y, '#ff0000', particleCount);

                // Update predator's kills and check for level up
                predatorState.kills++;
                if (predatorState.kills >= predatorState.killsToLevel) {
                    levelUp(predator);
                }
            } else if (dist < 150) {
                // Chase behavior - more aggressive when prey is trapped
                const predatorVel = insects.velocities.get(predator);
                if (predatorVel) {
                    const chaseSpeed = isTrapped ? 0.04 : 0.02;
                    // Faster chase speed for higher levels
                    const leveledChaseSpeed = chaseSpeed * (1 + (predatorState.level - 1) * 0.1);
                    predatorVel.x += (preyPos.x - predatorPos.x) * leveledChaseSpeed;
                    predatorVel.y += (preyPos.y - predatorPos.y) * leveledChaseSpeed;
                }
                
                // Escape behavior - much slower when trapped
                const preyVel = insects.velocities.get(prey);
                if (preyVel) {
                    const escapeSpeed = isTrapped ? 0.005 : 0.03;
                    preyVel.x += (preyPos.x - predatorPos.x) * escapeSpeed;
                    preyVel.y += (preyPos.y - predatorPos.y) * escapeSpeed;
                }
            }
        }

        // Restore the handleReproduction function
        function handleReproduction(insect, className, reproductionChance, maxCount) {
            if (!insect.classList.contains(className)) return;
            
            const currentCount = document.querySelectorAll('.' + className).length;
            if (currentCount >= maxCount || Math.random() > reproductionChance) return;
            
            const pos = insects.positions.get(insect);
            if (!pos) return;
            
            // Create new insect
            const newInsect = insect.cloneNode(true);
            document.body.appendChild(newInsect);
            
            // Initialize new insect with proper state and position
            insects.positions.set(newInsect, {
                x: pos.x + random(-20, 20),
                y: pos.y + random(-20, 20)
            });
            
            insects.velocities.set(newInsect, {
                x: random(-2, 2),
                y: random(-2, 2)
            });
            
            insects.states.set(newInsect, {
                fleeing: false,
                chasing: false,
                target: null,
                level: 1,
                kills: 0,
                killsToLevel: 2
            });

            // Initialize level indicator for new insect
            const indicator = createLevelIndicator(newInsect);
            newInsect.levelIndicator = indicator;
            updateLevelIndicator(newInsect);
            
            // Create birth effect
            createParticle(pos.x, pos.y, '#00ff00', 3);
        }

        // Restore the createParticle function
        function createParticle(x, y, color, count = 1) {
            if (activeParticles >= PARTICLE_LIMIT) return;
            
            for (let i = 0; i < count; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.left = x + 'px';
                particle.style.top = y + 'px';
                particle.style.backgroundColor = color;
                particle.style.width = random(3, 8) + 'px';
                particle.style.height = particle.style.width;
                
                particleContainer.appendChild(particle);
                activeParticles++;
                
                setTimeout(() => {
                    particle.remove();
                    activeParticles--;
                }, 1000);
            }
        }
    </script>
</body>
</html>
